//
// Generated file, do not edit! Created by nedtool 5.3 from nodes/UE/../../messages/ResourceAllocation.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __RESOURCEALLOCATION_M_H
#define __RESOURCEALLOCATION_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0503
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    typedef std::vector<int> ResourceGridAllocation;
// }}

/**
 * Class generated from <tt>nodes/UE/../../messages/ResourceAllocation.msg:23</tt> by nedtool.
 * <pre>
 * message ResourceAllocation
 * {
 *     int numRBsToSend;
 *     ResourceGridAllocation gridAllocation;
 * }
 * </pre>
 */
class ResourceAllocation : public ::omnetpp::cMessage
{
  protected:
    int numRBsToSend;
    ResourceGridAllocation gridAllocation;

  private:
    void copy(const ResourceAllocation& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ResourceAllocation&);

  public:
    ResourceAllocation(const char *name=nullptr, short kind=0);
    ResourceAllocation(const ResourceAllocation& other);
    virtual ~ResourceAllocation();
    ResourceAllocation& operator=(const ResourceAllocation& other);
    virtual ResourceAllocation *dup() const override {return new ResourceAllocation(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getNumRBsToSend() const;
    virtual void setNumRBsToSend(int numRBsToSend);
    virtual ResourceGridAllocation& getGridAllocation();
    virtual const ResourceGridAllocation& getGridAllocation() const {return const_cast<ResourceAllocation*>(this)->getGridAllocation();}
    virtual void setGridAllocation(const ResourceGridAllocation& gridAllocation);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ResourceAllocation& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ResourceAllocation& obj) {obj.parsimUnpack(b);}


#endif // ifndef __RESOURCEALLOCATION_M_H



